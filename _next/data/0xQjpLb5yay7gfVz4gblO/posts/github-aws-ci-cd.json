{"pageProps":{"frontMatter":{"title":"[GitHub Actions, AWS로 CI/CD 구축하기] - 1. GitHub Actions 구성하기","description":null,"uploaded":"2023-03-03T09:41:29.368Z","updated":null,"tags":["ci/cd","aws","github"],"draft":false},"slug":"github-aws-ci-cd","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      img: \"img\",\n      ol: \"ol\",\n      li: \"li\",\n      code: \"code\",\n      h3: \"h3\",\n      pre: \"pre\",\n      h4: \"h4\",\n      a: \"a\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Overview\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/github-aws-ci-cd-0.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"서버 배포는 다음 과정을 거쳐 이루어진다.\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"레포지토리의 \", _jsx(_components.code, {\n            children: \"main\"\n          }), \" 브랜치에 푸시하면 GitHub Action이 실행\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"GitHub Actions 실행\", \"\\n\", _jsxs(_components.ol, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"서버를 빌드\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"OpenID Connect로 AWS 인증\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"빌드된 파일을 AWS S3에 업로드\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"업로드가 완료되면 AWS CodeDeploy를 실행\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"AWS CodeDeploy가 S3에 업로드된 zip 파일을 미리 정의해둔 EC2 인스턴스에 업로드\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"CodeDeploy가 소스의 설정파일(appspec.yml)에 따라 스크립트를 실행하여 서버를 EC2 인스턴스에서 실행시킴\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"GitHub Actions\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"GitHub Actions는 깃 레포지토리에 \", _jsx(_components.code, {\n          children: \".github/workflow\"\n        }), \" 디렉터리를 만들고 \", _jsx(_components.code, {\n          children: \"yaml\"\n        }), \" 확장자 파일을 만들어서 구성할 수 있다. \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" 브랜치에 푸시되면 자동으로 서버를 빌드해서 AWS EC2에 배포하는 다음 파일을 보면서 과정을 살펴보자.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [_jsx(_components.code, {\n          children: \"yaml\"\n        }), \" 파일\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"# [1]\\nname: build and deploy a spring boot server application\\n\\n# [2]\\non:\\n  push:\\n    branches:\\n      - main\\n\\n# [3]\\nenv:\\n  applicationfolder: backend/gfi\\n  AWS_REGION: # AWS 리전. ex. ap-north-east-2\\n  S3_BUCKET: # 빌드 파일을 업로드할 S3 버킷 이름\\n  CODE_DEPLOY_APP_NAME: # CodeDeploy에 설정한 앱 이름\\n  CODE_DEPLOY_GROUP_NAME: # CodeDeploy에 설정한 그룹 이름\\n\\n#[4]\\njobs:\\n  # [5]\\n  build:\\n    name: Build and Package\\n    runs-on: ubuntu-latest\\n    defaults:\\n      run:\\n        working-directory: ${{ env.applicationfolder }}\\n\\n    # OIDC에 쓰이는 ID 토큰 발급을 위해 정의\\n    permissions:\\n      id-token: write\\n      contents: read\\n\\n    steps:\\n\\t  # [5-1]\\n      - uses: actions/checkout@v3\\n\\n\\t  # [5-2]\\n      - name: Set up JDK 17\\n        uses: actions/setup-java@v3\\n        with:\\n          java-version: '17'\\n          distribution: 'temurin'\\n\\n\\t  # [5-3]\\n      - name: Grant execute permission to gradlew\\n        run: chmod +x ./gradlew\\n        shell: bash\\n\\n\\t  # [5-4]\\n      - name: Execute Gradle build\\n        run: ./gradlew build\\n\\n\\t  # [5-5] OIDC\\n      - name: Configure AWS credentials\\n        uses: aws-actions/configure-aws-credentials@v1\\n        with:\\n          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}\\n          aws-region: ${{ env.AWS_REGION }}\\n\\n\\t  # [5-6]\\n      - name: Create a .env file\\n        run: |\\n          echo \\\"PORT=${{ vars.SERVER_PORT }}\\\" >> .env\\n\\n\\t  # [5-7]\\n      - name: Make zip file\\n        run: zip -r $GITHUB_SHA.zip ./\\n        shell: bash\\n\\n      - name: Upload Artifact to s3\\n        run: aws s3 cp $GITHUB_SHA.zip s3://${{ env.S3_BUCKET }}/\\n\\n  # [6]\\n  deploy:\\n    needs: build\\n    runs-on: ubuntu-latest\\n\\n    # OIDC에 쓰이는 ID 토큰 발급을 위해 정의\\n    permissions:\\n      id-token: write\\n      contents: read\\n\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: aws-actions/configure-aws-credentials@v1\\n        with:\\n          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}\\n          aws-region: ${{ env.AWS_REGION }}\\n      - run: |\\n          aws deploy create-deployment \\\\\\n            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \\\\\\n            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \\\\\\n            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=$GITHUB_SHA.zip\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[1] name\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"실행될 GitHub Actions의 이름을 정의한다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[2] on\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"main\"\n        }), \" 브랜치에 푸시된 경우에만 GitHub Actions가 실행되도록 한다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[3] env\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"해당 액션에서 사용할 변수를 정의한다. 여기서 정의한 변수는 액션 내부에서 \", _jsx(_components.code, {\n          children: \"${{ env.변수명 }}\"\n        }), \" 으로 사용할 수 있다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"만약 여러 액션에서 사용할 변수를 공통적으로 정의하고 싶다면, GitHub 레포의 설정에 들어가서 Repository variable을 설정하면 \", _jsx(_components.code, {\n          children: \"${{ vars.변수명 }}\"\n        }), \" 으로 액션 내부에서 가져올 수 있다 (다만 이 변수는 외부에 공개될 수 있으므로, 시크릿 키 같은 민감한 정보는 Secret variable로 설정해서 \", _jsx(_components.code, {\n          children: \"${{ secrets.변수명 }}\"\n        }), \" 으로 사용하자.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[4] job\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"액션이 실행될 때 수행할 작업(\", _jsx(_components.code, {\n          children: \"job\"\n        }), \")들을 정의한다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여기서는 서버 파일을 빌드하는 작업인 \", _jsx(_components.code, {\n          children: \"build\"\n        }), \" 와, 해당 빌드 파일을 배포하는 \", _jsx(_components.code, {\n          children: \"deploy\"\n        }), \" 두 개의 잡이 정의되었다. 그리고 잡들은 기본적으로 병렬적으로 실행되지만 여기서는 \", _jsx(_components.code, {\n          children: \"build\"\n        }), \" 작업이 끝난 후에만 \", _jsx(_components.code, {\n          children: \"deploy\"\n        }), \" 작업을 실행해야 하므로 \", _jsx(_components.code, {\n          children: \"needs\"\n        }), \" 옵션을 설정해서 순서대로 실행되게 하였다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"job 내부의 순서들은 \", _jsx(_components.code, {\n          children: \"step\"\n        }), \" 을 통해 정의한다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[5] job: build\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"build 잡은 ubuntu 환경에서 실행(\", _jsx(_components.code, {\n          children: \"runs-on\"\n        }), \")하고, 변수에 설정해둔 폴더를(\", _jsx(_components.code, {\n          children: \"working-directory\"\n        }), \") 현재 디렉터리로 설정한다.\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-1\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"가상머신에 해당 레포를 가져온다.\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-2\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Spring 서버 빌드를 위해 JDK를 설치한다.\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-3, 5-4\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Gradlew로 빌드 할 수 있도록 실행권한을 부여하고, 서버를 빌드한다.\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-5\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"빌드된 서버를 AWS에 업로드하기 위해서는 업로드할 AWS 계정에 대한 인증이 필요하다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이전까지는 깃헙 액션을 이용하는 IAM 유저를 생성한 후에 AWS 액세스 키를 발급해서 인증하는 아래와 같은 방식이 많았지만,\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"uses: aws-actions/configure-aws-credentials@v1\\nwith:\\n  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\\n  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\\n  aws-region: ${{ secrets.AWS_REGION }}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/aws-actions/configure-aws-credentials\",\n          children: \"https://github.com/aws-actions/configure-aws-credentials\"\n        }), \" 의 리드미를 보면, \", _jsx(_components.a, {\n          href: \"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services\",\n          children: \"GitHub's OIDC provider\"\n        }), \" 를 이용해 인증하는 방식을 추천하고 있으므로 여기서는 OpenID Connect를 통해 인증하는 방식을 사용했다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 방식을 사용하면 1. 키를 주기적으로 재발급하거나 2. 프로젝트마다 키를 새로 발급하는 귀찮은 과정을 생략할 수 있다.\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"OIDC 셋업하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"1) 자격 증명 공급자 추가\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 방식을 사용하려면 AWS의 IAM 유저 콘솔에 들어가서, 공급자 URL은 \", _jsx(_components.code, {\n          children: \"https://token.actions.githubusercontent.com\"\n        }), \", 대상은 \", _jsx(_components.code, {\n          children: \"http://sts.amazonaws.com\"\n        }), \" 으로 설정한 후 ‘공급자 추가'를 누른다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/github-aws-ci-cd-1.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"2) 역할 및 신뢰 관계 설정\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"GitHub Actions에서 AWS의 S3 버킷과 CodeDeploy에 접근할 수 있어야 하므로 권한에 \", _jsx(_components.code, {\n          children: \"AmazonS3FullAccess\"\n        }), \" 와 \", _jsx(_components.code, {\n          children: \"AWSCodeDeployFullAccess\"\n        }), \" 권한을 주고, \", _jsx(_components.strong, {\n          children: \"신뢰 관계\"\n        }), \"를 다음처럼 설정하면 OIDC 를 위한 역할 생성이 완료된다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n      {\\n          \\\"Effect\\\": \\\"Allow\\\",\\n          \\\"Principal\\\": {\\n              \\\"Federated\\\": // 아까 발급한 자격 증명 공급자의 ARN을 입력한다. ex. \\\"arn:aws:iam::0123456789:oidc-provider/token.actions.githubusercontent.com\\\"\\n          },\\n          \\\"Action\\\": \\\"sts:AssumeRoleWithWebIdentity\\\",\\n          \\\"Condition\\\": {\\n              \\\"StringEquals\\\": {\\n                  \\\"token.actions.githubusercontent.com:aud\\\": \\\"sts.amazonaws.com\\\"\\n              },\\n              \\\"StringLike\\\": {\\n                  \\\"token.actions.githubusercontent.com:sub\\\": // 접근할 유저, 레포, 브랜치 등을 정의한다. ex. \\\"repo:ORG_OR_USER_NAME/REPOSITORY\\\"\\n              }\\n          }\\n      }\\n  ]\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"3) 레포에 해당 역할을 시크릿 변수로 정의\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"생성한 역할(Role)의 ARN을 해당 레포에 \", _jsx(_components.code, {\n          children: \"AWS_ROLE_TO_ASSUME\"\n        }), \" 라는 이름을 가진 시크릿 키로 설정한다.\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-6\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"AWS 인증이 완료되면 서버를 띄울 때 정의할 환경 변수가 담긴 파일을 생성한다. 깃에 올라가면 안되는 민감한 정보나 깃에 올라갈 필요가 없는 변수들을 서버에 전달하기 위해 사용한다. \", _jsx(_components.code, {\n          children: \".env\"\n        }), \" 파일은 KEY=VALUE 가 여러 줄인 형식으로 정의되는데, 이 형식은 linux에서 \", _jsx(_components.code, {\n          children: \"cat .env | xargs\"\n        }), \" 명령어를 통해 바로 시스템 변수로 만들 수 있으며 Spring 에서는 설정파일인 \", _jsx(_components.code, {\n          children: \"application.yaml\"\n        }), \" 에서 시스템 변수를 바로 받을 수 있다.\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"5-7\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이제 서버에 띄울 파일들을 \", _jsx(_components.code, {\n          children: \"zip\"\n        }), \" 으로 압축하고 aws cli 명령어를 통해 s3 버킷에 올린다. \", _jsx(_components.code, {\n          children: \"zip\"\n        }), \" 파일의 이름은 쉬운 구분을 위해 깃헙 커밋 ID(\", _jsx(_components.code, {\n          children: \"$GITHUB_SHA\"\n        }), \")로 정의하였다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"[6] job: deploy\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"앞선 \", _jsx(_components.code, {\n          children: \"build\"\n        }), \" job이 성공적으로 완료되면 이 작업이 실행된다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"aws cli 명령어인 \", _jsx(_components.code, {\n          children: \"aws deploy code-deployment\"\n        }), \" 명령어를 통해 CodeDeploy가 실행되도록 요청한다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 작업이 성공적으로 완료되기 위해서는 CodeDeploy에 서버 배포를 위한 CodeDeploy Group과 CodeDeploy App을 미리 만들어두어야 한다.\"\n      }), \"\\n\", _jsx(_components.h4, {})]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}