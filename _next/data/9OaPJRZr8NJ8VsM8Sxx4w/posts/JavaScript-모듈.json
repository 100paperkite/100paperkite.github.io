{"pageProps":{"frontMatter":{"title":"JavaScript 모듈","description":null,"uploaded":"2022-03-27","updated":"2022-03-27T09:03:48.218Z","tags":["javascript"],"draft":true},"slug":"JavaScript-모듈","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      blockquote: \"blockquote\",\n      p: \"p\",\n      a: \"a\",\n      h1: \"h1\",\n      em: \"em\",\n      strong: \"strong\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\",\n      h2: \"h2\",\n      h3: \"h3\",\n      pre: \"pre\",\n      ol: \"ol\"\n    }, _provideComponents(), props.components), {Callout} = _components;\n    if (!Callout) _missingMdxReference(\"Callout\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\",\n            children: \"JavaScript modules | MDN Docs\"\n          }), \", \", _jsx(_components.a, {\n            href: \"https://ko.javascript.info/modules-intro\",\n            children: \"Module | ko.javascript.info\"\n          }), \" 포스팅을 참고하여 재정리해 본 글입니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"배경\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"옛날의 자바스크립트는 웹페이지에 간단한 상호작용을 추가하는 정도에 그쳤기 때문에 일반적으로 큰 스크립트가 필요하진 않았다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"하지만 상황이 많이 달라졌기에 큰 스크립트를 별도의 모듈로 분할하기 위한 매커니즘이 필요해졌지만 브라우저들의 지원은 더딘편이었는데\", _jsxs(\"small\", {\n          children: [\"(\", _jsx(_components.em, {\n            children: \"Node.js\"\n          }), \"나 여러 JavaScript 라이브러리/프레임워크들에선 이미 모듈 사용이 가능했다)\"]\n        }), \", 최근의 모던 브라우저들은 거의 다 네이티브로 모듈 시스템을 지원하고 있다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"브라우저가 네이티브로 모듈 시스템을 지원하기 때문에, 라이브러리에서 해결하지 못하는 \", _jsx(_components.strong, {\n          children: \"모듈 로딩 속도의 최적화\"\n        }), \"같은 점들에 있어서 훨씬 효율적이다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"구문\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"import\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"export\"\n        }), \" 구문으로 우리는 모듈 시스템을 사용할 수 있다. 모듈은 단지 파일 하나에 불과하며, 스크립트 하나가 모듈 하나이다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"export\"\n          }), \"로 외부 모듈이 해당 모듈의 변수나 함수에 접근할 수 있도록 할 수 있다. (모듈 내보내기)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"import\"\n          }), \"로 외부 모듈의 기능을 가져올 수 있다. (모듈 가져오기)\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"일반 스크립트와 모듈의 차이점\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        children: [\"1. 모듈은 항상 \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode\",\n          children: _jsx(_components.code, {\n            children: \"strict mode\"\n          })\n        }), \" 로 실행된다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"따라서 브라우저에서 모듈 최상위 레벨의 \", _jsx(_components.code, {\n          children: \"this\"\n        }), \"도 \", _jsx(_components.code, {\n          children: \"window\"\n        }), \"가 아닌 \", _jsx(_components.code, {\n          children: \"undefined\"\n        }), \"이다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"2. 모듈 레벨 스코프\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"모듈은 각자의 스코프를 가지므로, \", _jsx(_components.code, {\n          children: \"export\"\n        }), \", \", _jsx(_components.code, {\n          children: \"import\"\n        }), \"로 다른 모듈에 접근해야 한다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"3. 단 한 번의 평가\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"동일한 모듈이 여러 곳에서 사용되더라도, 모듈은 최초 호출 시 단 한번만 실행된다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"4. 브라우저 특정 기능\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"브라우저환경에서는 모듈을 스크립트에 \", _jsx(_components.code, {\n          children: \"type=\\\"module\\\"\"\n        }), \"을 붙여 사용한다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"지연 실행\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"모듈 스크립트는 항상 \", _jsx(_components.code, {\n          children: \"defer\"\n        }), \" 속성을 붙인 것 처럼 실행된다.\\n\", _jsx(_components.code, {\n          children: \"defer\"\n        }), \" 속성은 해당 스크립트를 백그라운드에서 다운로드하므로, script를 다운로드 하는 도중에도 HTML 파싱이 멈추지 않는다. 그리고 다운로드된 스크립트는 페이지 구성이 끝난 후에 실행된다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"따라서 모듈 스크립트는 항상 완전한 HTML 페이지를 볼 수 있고, 문서 내 요소에도 접근할 수 있다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"인라인 스크립트의 비동기 처리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"일반 스크립트에서 \", _jsx(_components.code, {\n          children: \"async\"\n        }), \" 속성은 외부 스크립트를 불러올 때만 유효하다. (ex. `\", _jsx(\"script\", {\n          async: true,\n          src: \"...\"\n        }), \") 이 속성이 붙은 스크립트는 로딩이 끝나면 다른 스크립트나 HTML 문서가 처리되길 기다리지 않고 바로 실행된다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그런데 모듈 스크립트에선 \", _jsx(_components.code, {\n          children: \"async\"\n        }), \"속성을 인라인 스크립트에도 적용할 수 있다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-xml\",\n          children: \"<!-- 필요한 모듈(analytics.js)의 로드가 끝나면 -->\\n<!-- 문서나 다른 <script>가 로드되길 기다리지 않고 바로 실행된다.-->\\n<script async type=\\\"module\\\">\\n  import { counter } from './analytics.js';\\n  counter.count();\\n</script>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"외부 스크립트\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"type=\\\"module\\\"\"\n        }), \"가 붙은 외부 모듈 스크립트의 경우 다음과 같은 특징들이 있다.\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"src\"\n          }), \" 속성 값이 동일한 외부 스크립트는 한 번만 실행된다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-xml\",\n          children: \"<script type=\\\"module\\\" src=\\\"once.js\\\"></script>\\n<script type=\\\"module\\\" src=\\\"once.js\\\"></script>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"다른 origin에서 모듈을 불러오려면 서버가 \", _jsx(_components.a, {\n            href: \"https://developer.mozilla.org/ko/docs/Web/HTTP/CORS\",\n            children: \"CORS\"\n          }), \" 를 지원해야 한다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"경로가 없는 모듈은 안됨\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"브라우저 환경에서는 \", _jsx(_components.code, {\n          children: \"import\"\n        }), \"에 무조건 경로가 있어야 한다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"import { counter } from 'Counter'; // Error\\n// ./Counter.js 처럼 경로와 확장자 명을 지정해야 한다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"nomodule\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"type=\\\"module\\\"\"\n        }), \"을 해석하지 못하는 브라우저는 해당 타입의 스크립트를 무시하고 넘어가는데, \", _jsx(_components.code, {\n          children: \"nomodule\"\n        }), \"속성을 사용하면 이를 대비할 수 있다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-xml\",\n          children: \"<script type=\\\"module\\\">\\n  // 모던 브라우저에서는 이 스크립트가 실행된다.\\n</script>\\n\\n<script nomodule>\\n  // type=\\\"module\\\"을 해석할 수 있는 모던 브라우저에서는 이 스크립트를 무시하고 넘어간다.\\n  // type=\\\"module\\\"을 해석할 수 없는 브라우저에서 이 스크립트가 실행된다.\\n</script>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h1, {\n        children: [_jsx(_components.code, {\n          children: \".mjs\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \".js\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"간혹 코드를 보다보면 \", _jsx(_components.code, {\n          children: \".js\"\n        }), \" 확장자 대신 \", _jsx(_components.code, {\n          children: \".mjs\"\n        }), \" 확장자를 볼 수가 있다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \".mjs\"\n        }), \"확장자는 해당 자바스크립트 파일이 모듈인 지를 명확히 해주는 용도로 쓰인다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.em, {\n          children: \"Node.js\"\n        }), \" 런타임이나 \", _jsx(_components.em, {\n          children: \"Babel\"\n        }), \" 같은 빌드 툴들이 해당 파일을 모듈로 취급할 수 있도록 해주기도 하고, 눈으로 봤을 때도 확장자만으로 해당 파일이 모듈인지 쉽게 알 수 있다.\"]\n      }), \"\\n\", _jsx(Callout, {\n        children: _jsxs(_components.p, {\n          children: [\"가끔 \", _jsx(_components.code, {\n            children: \".cjs\"\n          }), \" 확장자도 보이는데, 이는 CommonJS로 작성된 스크립트를 뜻한다.\"]\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [_jsx(_components.code, {\n          children: \".mjs\"\n        }), \" 확장자를 써야할까?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"브라우저에서 자바스크립트 파일을 모듈로 불러오도록 하려면 서버가 해당 파일을 보낼 때 \", _jsx(_components.code, {\n          children: \"Content-Type\"\n        }), \" 헤더를 \", _jsx(_components.code, {\n          children: \"text/javascript\"\n        }), \"같은 자바스크립트 MIME 타입으로 보내야 한다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그렇지 않으면 \", _jsx(_components.em, {\n          children: \"\\\"The server responded with a non-JavaScript MIME type\\\"\"\n        }), \" 에러가 나면서 브라우저가 해당 js 파일을 실행할 수 없다고 나온다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"대부분의 서버에선 \", _jsx(_components.code, {\n          children: \".js\"\n        }), \" 파일들은 정확한 MIME 타입으로 보내지만, \", _jsx(_components.code, {\n          children: \".mjs\"\n        }), \"의 경우엔 아닐 가능성이 높다.\", _jsxs(\"small\", {\n          children: [\"(\", _jsx(_components.em, {\n            children: \"GitHub Page\"\n          }), \" 나 \", _jsx(_components.em, {\n            children: \"Node.js\"\n          }), \" 의 \", _jsx(_components.em, {\n            children: \"http-server\"\n          }), \"같은 경우엔 \", _jsx(_components.code, {\n            children: \".mjs\"\n          }), \"를 다룰 수 있도록 되어있다.)\"]\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그러므로 내가 사용하는 툴이 \", _jsx(_components.code, {\n          children: \".mjs\"\n        }), \"를 지원하지 않아서 생길 수 있는 문제와 \", _jsx(_components.code, {\n          children: \".mjs\"\n        }), \"를 써서 얻을 수 있는 명확성의 트레이드 오프를 비교해보고 사용하는 것이 좋다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그런데 \", _jsx(_components.code, {\n          children: \"<script type=\\\"module\\\">\"\n        }), \" 속성으로 해당 스크립트가 모듈임을 나타낼 수도 있기 때문에 \", _jsx(_components.code, {\n          children: \".js\"\n        }), \"를 그냥 사용하는 것이 나은 선택일 수도 있다.\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"모듈 내보내고 가져오기\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        children: [_jsx(_components.code, {\n          children: \"default export\"\n        }), \" vs \", _jsx(_components.code, {\n          children: \"named export\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"named export\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"한 모듈에서 여러 객체를 export할 수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"export const name = 'Jiyeon';\\n\\n// or\\nconst name = 'Jiyeon';\\nexport { name };\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"default export\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"default export로 한 파일당 하나만 내보낼 수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"const name = 'Jiyeon';\\n\\nexport { name as default };\\nexport default name; // shortcut\\n\\n// 익명 함수로 바로 export도 가능하다.\\nexport default function(ctx) {\\n\\n}\\n\\n// 클래스도 가능\\nexport default class {\\n  constructor(){ ... }\\n}\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.code, {\n          children: \"import\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_Fragment, {}), \" import 방식은 다음과 같다. named는 named끼리, default는 default끼리 export, import가 가능하다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"named import\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"import { printName } from './modules/name.js';\\n\\n// 한번에 가져오기\\nimport * from './modules/name.js'\\nprintName('Jiyeon');\\n\\n// 모듈에 이름붙여서 가져오기\\nimport * as Name from './modules/name.js'\\nName.printName('Jiyeon');\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"default import\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"import Name from './modules/name.js'; // 어떤 이름으로도 import 할 수 있다\\nimport { default as Name } from './modules/name.js'; // 이렇게도 쓸 수 있다.\\n\"\n        })\n      }), \"\\n\", _jsx(Callout, {\n        children: _jsxs(_components.p, {\n          children: [\"몇몇 모듈 시스템에선 import할 때 \", _jsx(_components.code, {\n            children: \".js\"\n          }), \" 확장자를 빼도 되지만, 네이티브 모듈 시스템에선 동작하지\\n않으므로 확장자를 붙여야 한다.\"]\n        })\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"모듈 다시 내보내기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"export ... from ...\"\n        }), \" 문법을 사용하면 import한 개체를 다시 내보낼 수 있다. 주로 외부에 노출시키고 싶은 모듈을 관리하기 위해서 사용한다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"예를 들어 아래와 같은 폴더 구조가 있다고 가정해보자.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"modules/\\n  shapes.js\\n  shapes/\\n    circle.js\\n    square.js\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"named export\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"// 외부 모듈에서 이렇게 각각 불러올 수도 있지만\\nimport { Circle } from './modules/shapes/circle.js';\\nimport { Square } from './modules/shapes/square.js';\\n\\n//\\n// shape.js 에 이렇게 모듈을 다시 외부로 내보내면\\nexport { Circle } from './shapes/circle.js';\\nexport { Square } from './shapes/square.js';\\n\\n// 외부 모듈에서 이렇게 불러올 수 있다.\\nimport { Circle, Square } from './modules/shapes.js';\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"default export\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"default의 경우엔 주의해야 할 점이 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"// circle.js\\n// default로 모듈을 내보내는 경우엔 처리가 달라진다.\\nexport default class Circle {\\n  // ...\\n}\\n\\n// shapes.js\\nexport Circle from './shapes/circle.js'; // Error!\\nexport { default as Circle } from './shapes/circle.js'; // 이렇게 내보내야 한다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"// shapes.js\\nexport * from './circle.js'; // 이렇게 전체를 export하면 named export만 내보내진다.\\nexport { default } from './circle.js'; // 따라서 밑에 default export를 다시 내보내야 한다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"동적으로 모듈 로딩하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"모든 모듈을 최상위 모듈에서 불러오지 않고, 모듈이 필요할 때 동적으로 불러올 수도 있다.\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [_jsx(_components.code, {\n          children: \"import()\"\n        }), \" 표현식\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"import(module)\"\n        }), \" 표현식은 해당 모듈을 읽고 이 모듈이 내보내는 것들을 모두 포함하는 객체\", _jsxs(\"small\", {\n          children: [\"(\", _jsx(_components.code, {\n            children: \"import * as Module from 'module'\"\n          }), \"구문에서 Module이 이 객체이다.)\"]\n        }), \"를 담은 \", _jsx(_components.code, {\n          children: \"fulfilled\"\n        }), \"된 \", _jsx(_components.code, {\n          children: \"Promise\"\n        }), \"를 반환한다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"import('./modules/shapes/circle.js').then((Circle) => {\\n  Circle.drawCircle();\\n});\\n\\n// 또는 async 함수 내부에서 await으로 불러올 수도 있다.\\nlet Circle = await import('./modules/shapes/circle.js');\\nCircle.drawCircle();\\n\\n// or\\nlet { drawCircle } = await import('./modules/shapes/circle.js');\\ndrawCircle();\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"// default export의 경우엔 모듈 객체의 default 프로퍼티를 사용해야 한다.\\nlet Circle = await import('./modules/shapes/circle.js');\\nlet defaultExported = Circle.default;\\n\\n// 위 코드는 아래와 같다.\\nlet { default: defaultExported } = await import('./modules/shapes/circle.js');\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}