{"pageProps":{"frontMatter":{"title":"웹서버에 HTTPS 적용하기 (Let’s Encrypt, Nginx, AWS EC2)","description":null,"uploaded":"2023-03-03","updated":null,"tags":["https","backend","nginx"],"draft":false},"slug":"apply-https-on-webserver","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components), {Image} = _components;\n    if (!Image) _missingMdxReference(\"Image\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"가정\"\n      }), \"\\n\", _jsx(Image, {\n        src: \"/apply-https-on-webserver-0.png\",\n        height: \"450px\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"HTTP를 적용할 웹 어플리케이션 서버가 AWS EC2에 올려져 있다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Nginx를 사용해 HTTPS 설정을 한다. (클라이언트로부터 요청이 들어오면 Nginx가 서버 앞단에서 요청을 대신 받아서 웹 어플리케이션 서버에 넘겨준다. - 이를 \", _jsx(_components.a, {\n            href: \"https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%B2%84%EC%8A%A4_%ED%94%84%EB%A1%9D%EC%8B%9C\",\n            children: \"리버스 프록시\"\n          }), \"라 한다)\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Nginx 설정하기\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Nginx 설치\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"# 설치 1 (redhat 계열. ex. Amazon linux 2)\\nsudo yum clean metadata\\nsudo yum -y install nginx\\n\\n# 만약 패키지를 찾을 수 없다고 나오면 아래 명령어를 실행하자.\\nsudo amazon-linux-extras enable nginx1\\n\\n# 설치 2 (debian 계열. ex. Ubuntu)\\nsudo apt-get install nginx\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Nginx 설정 파일 수정하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"설치하고 나면 \", _jsx(_components.code, {\n          children: \"/etc/nginx\"\n        }), \" 디렉터리가 생성된다. nginx의 루트 설정 파일은 \", _jsx(_components.code, {\n          children: \"/etc/nginx/nginx.conf\"\n        }), \" 인데, 보통 해당 파일을 직접 수정하진 않고, 여러 하위 설정파일을 두고 이 파일에서 모듈처럼 로딩해서 사용한다. (코드에서 중복 제거하는 것 처럼) nginx.conf 파일을 보면 있는 \", _jsx(_components.code, {\n          children: \"include /etc/nginx/conf.d/*.conf\"\n        }), \" 코드가 설정을 로딩해온다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"https 설정을 위해서 \", _jsx(_components.code, {\n          children: \"conf.d\"\n        }), \" 폴더 하위에 \", _jsx(_components.code, {\n          children: \"default.conf\"\n        }), \" 같은 새로운 설정파일을 생성하고 아래와 같이 작성하자.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"server {\\n    listen 443 ssl;\\n    server_name <도메인 이름>\\n\\n    location / {\\n        proxy_pass http://127.0.0.1:<웹서버가 사용하는 포트>;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header Host $http_host;\\n    }\\n\\n    # 아래 부분은 Let's encrypt를 통해 SSL 인증을 받은 키를 사용한다.\\n    ssl_certificate /etc/letsencrypt/live/<SSL 발급받은 도메인 이름>/fullchain.pem;\\n    ssl_certificate_key /etc/letsencrypt/live/<SSL 발급받은 도메인 이름>/privkey.pem;\\n    include /etc/letsencrypt/options-ssl-nginx.conf;\\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\\n}\\n\\n# http로 들어온 요청은 https로 리다이렉트 되도록 설정한다.\\nserver {\\n    listen 80;\\n    location / {\\n        return 301 <도메인 이름>$request_uri;\\n    }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Nginx 실행, 로딩 명령어\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"설정이 완료되면 nginx를 실행시켜준다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"sudo service nginx start # nginx 서버 실행하기\\nsudo service nginx reload # 설정 파일을 수정했다면 설정파일을 로딩해온다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"SSL 인증서 발급하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"nginx에서 사용하기 위한 SSL 인증서를 발급해보자. 우리가 흔히 아는 웹사이트들은 CA라는 루트 인증기관에서 인증서를 발급해주는데, 직접 발급하려면 \", _jsx(_components.code, {\n          children: \"Let's encrypt\"\n        }), \" 로 발급할 수 있다(나를 내가 인증하는 식).\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"도메인 구매\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"인증서를 발급하려면 도메인이 무조건 있어야 한다. IP만으로는 설정할 수 없다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"AWS에서 제공하는 public domain을 쓰면 안될까? 싶지만, AWS 도메인은 사실 임시로 부여하는 것들이라 보안 위험이 크기 때문에 애초에 LetsEncrypt에서 막아두었다.\"\n      }), \"\\n\", _jsx(Image, {\n        src: \"/apply-https-on-webserver-1.png\",\n        height: \"200px\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"도메인을 구매할 수 있는 사이트에서 저렴하게 도메인을 구매하거나, 무료로 도메인을 사용할 수 있는 사이트에서 발급하자.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Certbot 설치\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let’s encrypt에서 추천하는 방식인 Certbot을 사용하면 SSL 인증서를 쉽게 발급할 수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"sudo yum install certbot\\nsudo yum install python-certbot-nginx # nginx용 플러그인 설치\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Let’s Encrypt로 SSL 발급하기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"sudo certbot --nginx  -d <도메인 이름>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위 명령어를 실행하고 나면 \", _jsx(_components.code, {\n          children: \"/etc/letsencrypt/live/\"\n        }), \" 하위에 도메인 이름으로 된 폴더가 하나 생기고, SSL 인증을 위한 파일들이 만들어진다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 파일 경로를 nginx의 설정파일에 입력해주고, nginx 설정을 리로드해오면 모든 설정이 끝난다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"인증서 갱신 자동화하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Let’s Encrypt는 90일 마다 인증서를 갱신해주어야 하는데, 직접 주기마다 갱신을 해주는 것은 불편하므로 스케줄러를 이용해서 자동화해보자. linux에는 \", _jsx(_components.code, {\n          children: \"crontab\"\n        }), \" 이라는 스케줄러가 있으므로 \", _jsx(_components.code, {\n          children: \"crontab\"\n        }), \" 을 사용한다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아래 명령어를 이용해서 편집기를 실행하자.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"crontab -e # 스케줄러 편집기 실행\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그리고 편집기에 매월 1일 0시 0분에 \", _jsx(_components.code, {\n          children: \"certbot renew\"\n        }), \" 로 인증서를 갱신하는 아래 명령어를 입력하고 저장하면 스케줄러 등록이 끝난다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"0 0 1 * * certbot renew --renew-hook \\\"sudo service nginx reload\\\"\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}