{"pageProps":{"frontMatter":{"title":"Machine code vs. Byte code vs. Object code vs. Assembly code","description":"컴파일러와 인터프리터가 생성하거나 사용하는 code 용어들을 정리.","uploaded":"2022-05-02T13:35:08.723Z","updated":"2022-05-02T13:35:08.723Z","tags":[],"draft":false},"slug":"Machine-code-vs-Byte-code-vs-Object-code-vs-Assembly-code","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      a: \"a\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components), {Image} = _components;\n    if (!Image) _missingMdxReference(\"Image\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"컴파일러와 인터프리터에 대해 알아보다 보면 중간 과정에서 무수히 많은 \", _jsx(_components.code, {\n          children: \"code\"\n        }), \"들이 등장하는데.. 이걸 정리해보았다.\"]\n      }), \"\\n\", _jsx(Image, {\n        src: \"/code-diagram.png\",\n        alt: \"diagram of codes\",\n        width: \"800\",\n        height: \"600\",\n        sourceHref: \"https://stackoverflow.com/a/55553791\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Source code\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"소스 코드는 사람이 보통 사람이 읽을 수 코드를 말하며 \", _jsx(\"small\", {\n            children: \"(C, Java, JavaScript 같은 우리가 흔히 아는 언어로 써진 코드.)\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"컴파일러 같은 변환 프로그램에 의해 실행 가능한 코드로 변환된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Assembly code\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"어셈블리 코드도 사람이 읽을 수 있으며, machine code와 1:1 대응된다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"하지만 어셈블리 코드를 CPU가 알아먹진 못하기 때문에 어셈블러나 컴파일러로 변환해야 한다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"컴퓨터 구조 시간에 보았을 아래와 같은 코드를 말한다.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-assembly\",\n                  children: \"push ebp\\nmov  ebp, esp\\n...\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Machine code\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"CPU가 바로 실행할 수 있는 binary 코드이다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"CPU의 아키텍처(ex. Intel, AMD, ARM 프로세서)에 따라 machine code가 달라진다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Object code\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://en.wikipedia.org/wiki/Linker_(computing)\",\n            children: \"linking\"\n          }), \" 과정을 거치지 않은 \", _jsx(_components.code, {\n            children: \"machine code\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"간단한 소스 코드의 경우 linking이 필요없기도 하다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"IDE의 경우 보통 컴파일+링킹이 같이 수행된다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"library files / other object files / Relocation object code information\\n                                         \\\\\\n                                          v\\nsource code -(compiler)-> object code -(linker)-> machine code\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Byte code\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"source code\"\n          }), \"와 \", _jsx(_components.code, {\n            children: \"machine code\"\n          }), \"의 중간 코드.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"인터프리터\"\n          }), \"가 \", _jsx(_components.code, {\n            children: \"byte code\"\n          }), \"를 OS마다 적합한 \", _jsx(_components.code, {\n            children: \"machine code\"\n          }), \"로 변환한다.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Java의 JVM 인터프리터, CPython의 인터프리터 등이 이 과정을 수행한다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"source code -(compiler)-> byte code -(JVM/CPython etc.) --> Windows machine code\\n                                                        \\\\_> Linux machine code\\n                                                        \\\\_> Mac OS machine code\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"참고\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://rahul-saini.medium.com/machine-code-vs-byte-code-vs-object-code-vs-source-code-vs-assembly-code-812c9780f24c\",\n            children: \"Medium | machine-code-vs-byte-code-vs-object-code-vs-source-code-vs-assembly-code\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://stackoverflow.com/questions/466790/assembly-code-vs-machine-code-vs-object-code\",\n            children: \"stackoverflow\"\n          })\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}}},"__N_SSG":true}